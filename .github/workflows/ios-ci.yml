name: iOS CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PROJECT: "Practice Plan Generator.xcodeproj"
  SCHEME:  "Practice Plan Generator"
  DEST_GENERIC: "generic/platform=iOS Simulator"
  DEST_LATEST:  "platform=iOS Simulator,OS=latest"

jobs:
  build-and-test:
    runs-on: macos-15
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Display Xcode version
        run: xcodebuild -version

      - name: List available schemes and simulators
        run: |
          echo "Available schemes:"
          xcodebuild -list -project "$PROJECT" || true
          echo "Available runtimes:"
          xcrun simctl list runtimes
          echo "Available devices:"
          xcrun simctl list devices

      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.swift', '**/*.pbxproj', '**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

      - name: Build (Debug configuration)
        run: |
          set -eo pipefail
          xcodebuild \
            -project "$PROJECT" \
            -scheme "$SCHEME" \
            -destination "$DEST_GENERIC" \
            -configuration Debug \
            -skipPackagePluginValidation \
            clean build | xcpretty
        env:
          LC_ALL: en_US.UTF-8

      - name: Run unit tests
        run: |
          set -eo pipefail
          xcodebuild \
            -project "$PROJECT" \
            -scheme "$SCHEME" \
            -destination "$DEST_LATEST" \
            -configuration Debug \
            -enableCodeCoverage YES \
            test | xcpretty

      - name: Upload diagnostic logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-logs
          path: ~/Library/Logs/DiagnosticReports
          if-no-files-found: ignore
